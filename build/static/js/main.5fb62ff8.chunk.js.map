{"version":3,"sources":["serviceWorker.js","components/Message.js","components/Chat.js","containers/Chat.js","components/Rating.js","components/UserList.js","components/Sidebar.js","containers/Sidebar.js","components/AddNewMessage.js","store/actionTypes.js","store/actions.js","containers/AddNewMessage.js","sockets/index.js","sagas/index.js","components/Login.js","containers/Login.js","App.js","store/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Message","_ref","message","author","time","react_default","a","createElement","className","Chat","messages","this","props","map","components_Message","Object","assign","key","id","Component","connect","state","ChatComponent","Rating","_this$props","users","rating","forEach","user","count","mes","toString","name","sorted","item","push","sort","b","UserList","Sidebar","components_UserList","components_Rating","SidebarComponent","AddNewMessage","sendMessage","e","_assertThisInitialize2","assertThisInitialized","_this","addMessage","type","input","value","_this2","onKeyPress","placeholder","ref","node","onClick","ADD_MESSAGE","MESSAGE_RECEIVED","ADD_USER","USERS_LIST","LOGIN","nextMessageId","nextUserId","getTime","date","Date","getHours","getMinutes","x","concat","join","addUser","types","login","dispatch","AddNewMessageComponent","setupSocket","username","socket","WebSocket","onopen","send","JSON","stringify","onmessage","event","data","parse","handleNewMessage","regenerator_default","mark","params","wrap","_context","prev","next","takeEvery","action","stop","Login","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","saga","nameInput","setState","showLoginForm","showError","run","_this$state","LoginComponent","App","containers_Login_Login","containers_Chat_Chat","containers_AddNewMessage_AddNewMessage","containers_Sidebar_Sidebar","arguments","length","undefined","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","reducers","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fb62ff8.chunk.js","sourcesContent":["const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = ({message, author, time}) => {\r\n  return (\r\n    <p className='message'>\r\n      <i className='message__time'>{time}</i> <i className='message__author'>{author}</i>: {message}\r\n    </p>\r\n  )\r\n}\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  time: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\n\r\nclass Chat extends Component {\r\n  render() {\r\n    const {props:{messages}} = this\r\n    return (\r\n      <div className=\"chat\">\r\n        <ul>\r\n          {messages.map(message => (\r\n            <Message\r\n              key={message.id}\r\n              {...message}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChat.propTypes = {\r\n  messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Chat;","import { connect } from 'react-redux';\r\nimport ChatComponent from '../components/Chat'\r\n\r\nexport const Chat = connect(state => ({\r\n  messages: state.messages\r\n}), {})(ChatComponent)","import React, { Component } from 'react';\r\n\r\nclass Rating extends Component {\r\n  render() {\r\n    const {props:{users, messages}} = this\r\n\r\n    let rating = {};\r\n    users.forEach(user => {\r\n      let count = 0;\r\n      messages.forEach(mes => {\r\n        if (mes.author.toString() === user.name.toString()) {\r\n          count++\r\n          rating[user.name] = count;\r\n        }\r\n      })\r\n    })\r\n    let sorted = [];\r\n    for (let item in rating) {\r\n      sorted.push([item, rating[item]]);\r\n    }\r\n\r\n    sorted.sort((a, b) => {\r\n      return b[1] - a[1];\r\n    });\r\n\r\n    return (\r\n      <div className=\"rating\">\r\n        <h3 className=\"rating__header\">Рейтинг по количеству сообщений:</h3>\r\n        <ul className='rating__list'>\r\n          {sorted.map(user => (\r\n            <span className='rating__item' key={user[0]}>\r\n              {user[0]} ( {user[1] ? user[1] : 0} )\r\n            </span>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rating;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass UserList extends Component {\r\n  render() {\r\n    const {props:{users}} = this\r\n\r\n    return (\r\n      <div className='user-list'>\r\n        <h3 className='user-list__header'>Список подключенных пользователей:</h3>\r\n        <ul className='user-list__list'>\r\n          {users.map(user => (\r\n            <span className='user-list__item' key={user.id}>{user.name}</span>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUserList.propTypes = {\r\n  users: PropTypes.array.isRequired\r\n}\r\n\r\nexport default UserList;","import React, { Component } from 'react';\r\nimport Rating from \"./Rating\";\r\nimport UserList from \"./UserList\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <div className='sidebar'>\r\n        <UserList users={this.props.users}/>\r\n        <Rating users={this.props.users} messages={this.props.messages}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import { connect } from 'react-redux';\r\nimport SidebarComponent from '../components/Sidebar'\r\n\r\nexport const Sidebar = connect(state => ({\r\n  users: state.users,\r\n  messages: state.messages\r\n}), {})(SidebarComponent)","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddNewMessage extends Component {\r\n  sendMessage = (e) => {\r\n    const {props: {addMessage, name}} = this;\r\n    if (e.key === 'Enter' || e.type === 'click') {\r\n      addMessage(this.input.value, name);\r\n      this.input.value = ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='new-message'>\r\n        <input\r\n          className='new-message__input'\r\n          onKeyPress={this.sendMessage}\r\n          type='text'\r\n          placeholder='Введите сообщение'\r\n          ref = {(node) => {this.input = node}}\r\n        />\r\n        <button\r\n          className='new-message__button'\r\n          onClick={this.sendMessage}\r\n        >\r\n          Отправить\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddNewMessage.propTypes = {\r\n  addMessage: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddNewMessage;","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const USERS_LIST = 'USERS_LIST';\r\nexport const LOGIN = 'LOGIN';","import * as types from './actionTypes';\r\n\r\nlet nextMessageId = 0;\r\nlet nextUserId = 0;\r\n\r\nexport function getTime() {\r\n  let date = new Date();\r\n  let time = [date.getHours(), date.getMinutes()].map(x => {\r\n    return x < 10 ? `0${x}` : x\r\n  }).join(':');\r\n  return time;\r\n}\r\n\r\nexport const addMessage = (message, author) => ({\r\n  type: types.ADD_MESSAGE,\r\n  id: nextMessageId++,\r\n  message,\r\n  author,\r\n  time: getTime()\r\n})\r\n\r\nexport const addUser = name => ({\r\n  type: types.ADD_USER,\r\n  id: nextUserId++,\r\n  name\r\n})\r\n\r\nexport const messageReceived = (message, author) => ({\r\n  type: types.MESSAGE_RECEIVED,\r\n  id: nextMessageId++,\r\n  message,\r\n  author,\r\n  time: getTime()\r\n})\r\n\r\nexport const usersList = users => ({\r\n  type: types.USERS_LIST,\r\n  users\r\n})\r\n\r\nexport const login = name => ({\r\n  type: types.LOGIN,\r\n  name\r\n})","import { connect } from 'react-redux';\r\nimport AddNewMessageComponent from '../components/AddNewMessage'\r\nimport { addMessage } from \"../store/actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addMessage: (message, author) => {\r\n    dispatch(addMessage(message, author));\r\n  }\r\n})\r\n\r\nexport const AddNewMessage = connect(state => ({\r\n  name: state.login\r\n}), mapDispatchToProps)(AddNewMessageComponent)","import * as types from '../store/actionTypes';\r\nimport { addUser, messageReceived, usersList } from '../store/actions';\r\n\r\nconst setupSocket = (dispatch, username) => {\r\n  // create connection to web-socket server\r\n  const socket = new WebSocket('ws://localhost:8989');\r\n\r\n  socket.onopen = () => {\r\n    socket.send(JSON.stringify({\r\n      type: types.ADD_USER,\r\n      name: username\r\n    }))\r\n  }\r\n\r\n  socket.onmessage = event => {\r\n    const data = JSON.parse(event.data);\r\n    switch (data.type) {\r\n      case types.ADD_MESSAGE:\r\n        dispatch(messageReceived(data.message, data.author));\r\n        break\r\n      case types.ADD_USER:\r\n        dispatch(addUser(data.name));\r\n        break\r\n      case types.USERS_LIST:\r\n        dispatch(usersList(data.users));\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return socket;\r\n}\r\n\r\nexport default setupSocket;","import { takeEvery } from 'redux-saga/effects';\r\nimport * as types from '../store/actionTypes';\r\n\r\nconst handleNewMessage = function* handleNewMessage(params) {\r\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\r\n    action.author = params.username;\r\n    params.socket.send(JSON.stringify(action));\r\n  })\r\n}\r\n\r\nexport default handleNewMessage","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport setupSocket from '../sockets'\r\nimport handleNewMessage from '../sagas'\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      showLoginForm: true,\r\n      showError: false\r\n    }\r\n  }\r\n\r\n  login = (e) => {\r\n    const {props: {dispatch, addUser, login, saga}} = this\r\n    if (e.key === 'Enter') {\r\n      const username = this.nameInput.value;\r\n      this.setState(username ? {showLoginForm: false} : {showError: true});\r\n      if (username) {\r\n        addUser(username);\r\n        login(username);\r\n        const socket = setupSocket(dispatch, username);\r\n        saga.run(handleNewMessage, {socket, username});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {state: {showLoginForm, showError}} = this\r\n\r\n    return (\r\n      <div>\r\n        {showLoginForm\r\n          ? <div className='login'>\r\n            <span className='login__header'>Для входа в чат введите имя</span>\r\n            <input\r\n              onKeyPress={this.login}\r\n              className='login__input'\r\n              placeholder='Имя'\r\n              type=\"text\"\r\n              ref = {(node) => {this.nameInput = node}}\r\n            />\r\n            {showError\r\n              ? <span className='login__error'>Вы забыли ввести имя</span>\r\n              : null\r\n            }\r\n          </div>\r\n          : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  addUser: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login;","import { connect } from 'react-redux';\r\nimport LoginComponent from '../components/Login'\r\nimport { addUser, login } from \"../store/actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addUser: (name) => {\r\n    dispatch(addUser(name))\r\n  },\r\n  login: (name) => {\r\n    dispatch(login(name))\r\n  }\r\n})\r\n\r\nexport const Login = connect(() => ({}), mapDispatchToProps)(LoginComponent)","import React, { Component } from 'react';\r\nimport './scss/app.scss';\r\nimport { Chat } from './containers/Chat';\r\nimport { Sidebar } from \"./containers/Sidebar\";\r\nimport { AddNewMessage } from \"./containers/AddNewMessage\";\r\nimport { Login } from \"./containers/Login\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Login dispatch={this.props.dispatch} saga={this.props.saga} />\r\n        <div className='app__chatbox'>\r\n          <Chat/>\r\n          <AddNewMessage/>\r\n        </div>\r\n        <Sidebar/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as types from './actionTypes';\r\n\r\nexport function messages(state = [], action) {\r\n  switch (action.type) {\r\n    case types.ADD_MESSAGE:\r\n    case types.MESSAGE_RECEIVED:\r\n      return state.concat([\r\n        {\r\n          message: action.message,\r\n          author: action.author,\r\n          id: action.id,\r\n          time: action.time,\r\n        }\r\n      ])\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function users(state = [], action) {\r\n  switch (action.type) {\r\n    case types.ADD_USER:\r\n      return state.concat([\r\n        { name: action.name, id: action.id }\r\n      ])\r\n    case types.USERS_LIST:\r\n      return action.users\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function login(state = '', action) {\r\n  switch (action.type) {\r\n    case types.LOGIN:\r\n      return action.name\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport App from './App';\r\nimport * as reducers from \"./store/reducers\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n  combineReducers(reducers),\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ ?\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() :\r\n      compose,\r\n  )\r\n);\r\n\r\n// send dispatch and saga to open web socket connection when user enter name\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App\r\n      dispatch={store.dispatch}\r\n      saga={sagaMiddleware}\r\n    />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}