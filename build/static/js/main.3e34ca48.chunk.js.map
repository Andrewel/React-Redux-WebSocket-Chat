{"version":3,"sources":["serviceWorker.js","components/Message.js","components/Chat.js","containers/Chat.js","components/Rating.js","components/UserList.js","components/Sidebar.js","containers/Sidebar.js","components/AddNewMessage.js","store/actionTypes.js","store/actions.js","containers/AddNewMessage.js","sockets/index.js","sagas/index.js","components/Login.js","containers/Login.js","App.js","store/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Message","_ref","time","from","message","m","localStorage","getItem","console","log","react_default","a","createElement","className","concat","moment","format","Chat","messages","this","props","map","components_Message","Object","assign","key","id","Component","connect","state","ChatComponent","Rating","_this$props","users","rating","forEach","user","count","mes","toString","name","sorted","item","push","sort","b","UserList","Sidebar","components_UserList","components_Rating","SidebarComponent","AddNewMessage","ws","WebSocket","sendMessage","e","_assertThisInitialize2","assertThisInitialized","_this","addMessage","type","send","JSON","stringify","input","value","_this2","onKeyPress","placeholder","ref","node","onClick","ADD_MESSAGE","MESSAGE_RECEIVED","ADD_USER","USERS_LIST","LOGIN","nextMessageId","nextUserId","getTime","date","Date","getHours","getMinutes","x","join","login","dispatch","types","AddNewMessageComponent","setupSocket","username","socket","onopen","onmessage","event","data","parse","onclose","wasClean","code","reason","onerror","error","handleNewMessage","regenerator_default","mark","params","wrap","_context","prev","next","takeEvery","action","stop","Login","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addUser","saga","nameInput","setItem","setState","showLoginForm","showError","run","_this$state","LoginComponent","App","containers_Login_Login","containers_Chat_Chat","containers_AddNewMessage_AddNewMessage","containers_Sidebar_Sidebar","arguments","length","undefined","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","reducers","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e34ca48.chunk.js","sourcesContent":["const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (!process.env.PUBLIC_URL && process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as moment from 'moment'\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = ({time, from, message}) => {\r\n  let m = 'message'\r\n  from === localStorage.getItem('Username') ? m = 'message2' : console.log('bad')\r\n  return (\r\n    <p className={m}>\r\n      <i className={`${m}__time`}>{moment(time).format('LT')}</i> <i className={`${m}__author`}>{from}</i>: {message}\r\n    </p> \r\n  )\r\n}\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  from: PropTypes.string.isRequired,\r\n  time: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message';\r\n\r\nclass Chat extends Component {\r\n  render() {\r\n    const {props:{messages}} = this\r\n    return (\r\n      <div className=\"chat\">\r\n        <ul>\r\n          {messages.map(message => (\r\n            <Message\r\n              key={message.id}\r\n              {...message}\r\n            /> \r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nChat.propTypes = {\r\n  messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Chat;","import { connect } from 'react-redux';\r\nimport ChatComponent from '../components/Chat'\r\n\r\nexport const Chat = connect(state => ({\r\n  messages: state.messages\r\n}), {})(ChatComponent)","import React, { Component } from 'react';\r\n\r\nclass Rating extends Component {\r\n  render() {\r\n    const {props:{users, messages}} = this\r\n\r\n    let rating = {};\r\n    users.forEach(user => {\r\n      let count = 0;\r\n      messages.forEach(mes => {\r\n        if (mes.from.toString() === user.name.toString()) {\r\n          count++\r\n          rating[user.name] = count;\r\n        }\r\n      })\r\n    })\r\n    let sorted = [];\r\n    for (let item in rating) {\r\n      sorted.push([item, rating[item]]);\r\n    }\r\n\r\n    sorted.sort((a, b) => {\r\n      return b[1] - a[1];\r\n    });\r\n\r\n    return (\r\n      <div className=\"rating\">\r\n        <h3 className=\"rating__header\">Рейтинг по количеству сообщений:</h3>\r\n        <ul className='rating__list'>\r\n          {sorted.map(user => (\r\n            <span className='rating__item' key={user[0]}>\r\n              {user[0]} ( {user[1] ? user[1] : 0} )\r\n            </span>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rating;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass UserList extends Component {\r\n  render() {\r\n    const {props:{users}} = this\r\n\r\n    return (\r\n      <div className='user-list'>\r\n        <h3 className='user-list__header'>List of users:</h3>\r\n        <ul className='user-list__list'>\r\n          {users.map(user => (\r\n            <span className='user-list__item' key={user.id}>{user.name}</span>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUserList.propTypes = {\r\n  users: PropTypes.array.isRequired\r\n}\r\n\r\nexport default UserList;","import React, { Component } from 'react';\r\nimport Rating from \"./Rating\";\r\nimport UserList from \"./UserList\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <div className='sidebar'>\r\n        <UserList users={this.props.users}/>\r\n        <Rating users={this.props.users} messages={this.props.messages}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import { connect } from 'react-redux';\r\nimport SidebarComponent from '../components/Sidebar'\r\n\r\nexport const Sidebar = connect(state => ({\r\n  users: state.users,\r\n  messages: state.messages\r\n}), {})(SidebarComponent)","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddNewMessage extends Component {\r\n  ws = new WebSocket('wss://wssproxy.herokuapp.com')\r\n  sendMessage = (e) => {\r\n    const {props: {addMessage, name}} = this;\r\n    if (e.key === 'Enter' || e.type === 'click') {\r\n     /*  addMessage(this.input.value, name); */\r\n      this.ws.send(\r\n        JSON.stringify({ from: name, message: this.input.value })\r\n      );\r\n      this.input.value = ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='new-message'>\r\n        <input\r\n          className='new-message__input'\r\n          onKeyPress={this.sendMessage}\r\n          type='text'\r\n          placeholder='Enter message...'\r\n          ref = {(node) => {this.input = node}}\r\n        />\r\n        <button\r\n          className='new-message__button'\r\n          onClick={this.sendMessage}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAddNewMessage.propTypes = {\r\n  addMessage: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddNewMessage;","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const USERS_LIST = 'USERS_LIST';\r\nexport const LOGIN = 'LOGIN';","import * as types from './actionTypes';\r\n\r\nlet nextMessageId = 0;\r\nlet nextUserId = 0;\r\n\r\nexport function getTime() {\r\n  let date = new Date();\r\n  let time = [date.getHours(), date.getMinutes()].map(x => {\r\n    return x < 10 ? `0${x}` : x\r\n  }).join(':');\r\n  return time;\r\n}\r\n\r\nexport const addMessage = (message, from) => ({\r\n  type: types.ADD_MESSAGE,\r\n  id: nextMessageId++,\r\n  message,\r\n  from,\r\n  time: getTime()\r\n})\r\n\r\nexport const addUser = name => ({\r\n  type: types.ADD_USER,\r\n  id: nextUserId++,\r\n  name\r\n})\r\n\r\nexport const messageReceived = (id, time, from, message) => ({\r\n  type: types.MESSAGE_RECEIVED,\r\n  id,\r\n  time,\r\n  from,\r\n  message\r\n})\r\n\r\nexport const usersList = users => ({\r\n  type: types.USERS_LIST,\r\n  users\r\n})\r\n\r\nexport const login = name => ({\r\n  type: types.LOGIN,\r\n  name\r\n})","import { connect } from 'react-redux';\r\nimport AddNewMessageComponent from '../components/AddNewMessage'\r\nimport { addMessage } from \"../store/actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addMessage: (message, from) => {\r\n    dispatch(addMessage(message, from));\r\n  }\r\n})\r\n\r\nexport const AddNewMessage = connect(state => ({\r\n  name: state.login\r\n}), mapDispatchToProps)(AddNewMessageComponent)","import * as moment from 'moment'\r\nimport * as types from '../store/actionTypes';\r\nimport { addUser, messageReceived, usersList } from '../store/actions';\r\n\r\nconst setupSocket = (dispatch, username) => {\r\n  // create connection to web-socket server\r\n  const socket = new WebSocket('wss://wssproxy.herokuapp.com');\r\n\r\n  socket.onopen = () => {\r\n    console.log('Connection established')\r\n    socket.send(JSON.stringify({\r\n      from: username,\r\n      message: `${username} has joined the chat`\r\n    }))\r\n  }\r\n\r\n  socket.onmessage = event => {\r\n    const data = JSON.parse(event.data);\r\n    console.log(data)\r\n    console.log(`${moment(data[0].time).format('llll')} ${data[0].from}:${data[0].message}`)\r\n    /* data.forEach((element) => {\r\n      console.log(moment(element.time).format('llll'))\r\n    }) */\r\n    dispatch(messageReceived(data[0].id, data[0].time, data[0].from, data[0].message))\r\n    /* switch (data.type) {\r\n      case types.ADD_MESSAGE:\r\n        dispatch(messageReceived(data.message, data.from));\r\n        break\r\n      case types.ADD_USER:\r\n        dispatch(addUser(data.name));\r\n        break\r\n      case types.USERS_LIST:\r\n        dispatch(usersList(data.users));\r\n        break\r\n      default:\r\n        break\r\n    } */\r\n  }\r\n\r\n  socket.onclose = (event) => {\r\n    if (event.wasClean) {\r\n      console.log(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`)\r\n    } else {\r\n      console.log('[close] Соединение прервано')\r\n    }\r\n  }\r\n\r\n  socket.onerror = (error) => {\r\n    console.log(`[error] ${error.message}`)\r\n  }\r\n\r\n  return socket;\r\n}\r\n\r\nexport default setupSocket;","import { takeEvery } from 'redux-saga/effects';\r\nimport * as types from '../store/actionTypes';\r\n\r\nconst handleNewMessage = function* handleNewMessage(params) {\r\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\r\n    action.from = params.username;\r\n    params.socket.send(JSON.stringify(action));\r\n  })\r\n}\r\n\r\nexport default handleNewMessage","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport setupSocket from '../sockets';\r\nimport handleNewMessage from '../sagas';\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      /* showLoginForm: localStorage.getItem('Username') ? false : true, */\r\n      showLoginForm: true,\r\n      showError: false\r\n    };\r\n  }\r\n\r\n  login = e => {\r\n    const {\r\n      props: { dispatch, addUser, login, saga }\r\n    } = this;\r\n    if (e.key === 'Enter') {\r\n      const username = this.nameInput.value;\r\n      localStorage.setItem('Username', username);\r\n      this.setState(username ? { showLoginForm: false } : { showError: true });\r\n      if (username) {\r\n        addUser(username);\r\n        login(username);\r\n        const socket = setupSocket(dispatch, username);\r\n        saga.run(handleNewMessage, { socket, username });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      state: { showLoginForm, showError }\r\n    } = this;\r\n\r\n    return (\r\n      <div>\r\n        {showLoginForm ? (\r\n          <div className='login'>\r\n            <span className='login__header'>Your Nickname</span>\r\n            <input\r\n              onKeyPress={this.login}\r\n              className='login__input'\r\n              placeholder='Name'\r\n              type='text'\r\n              ref={node => {\r\n                this.nameInput = node;\r\n              }}\r\n            />\r\n            {showError ? (\r\n              <span className='login__error'>Error login</span>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  addUser: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Login;\r\n","import { connect } from 'react-redux';\r\nimport LoginComponent from '../components/Login'\r\nimport { addUser, login } from \"../store/actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addUser: (name) => {\r\n    dispatch(addUser(name))\r\n  },\r\n  login: (name) => {\r\n    dispatch(login(name))\r\n  }\r\n})\r\n\r\nexport const Login = connect(() => ({}), mapDispatchToProps)(LoginComponent)","import React, { Component } from 'react';\r\nimport './scss/app.scss';\r\nimport { Chat } from './containers/Chat';\r\nimport { Sidebar } from \"./containers/Sidebar\";\r\nimport { AddNewMessage } from \"./containers/AddNewMessage\";\r\nimport { Login } from \"./containers/Login\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Login dispatch={this.props.dispatch} saga={this.props.saga} />\r\n        <div className='app__chatbox'>\r\n          <Chat/>\r\n          <AddNewMessage/>\r\n        </div>\r\n        <Sidebar/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as types from './actionTypes';\r\n\r\nexport function messages(state = [], action) {\r\n  switch (action.type) {\r\n    case types.ADD_MESSAGE:\r\n    case types.MESSAGE_RECEIVED:\r\n      return state.concat([\r\n        {\r\n          message: action.message,\r\n          from: action.from,\r\n          id: action.id,\r\n          time: action.time,\r\n        }\r\n      ])\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function users(state = [], action) {\r\n  switch (action.type) {\r\n    case types.ADD_USER:\r\n      return state.concat([\r\n        { name: action.name, id: action.id }\r\n      ])\r\n    case types.USERS_LIST:\r\n      return action.users\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function login(state = '', action) {\r\n  switch (action.type) {\r\n    case types.LOGIN:\r\n      return action.name\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport App from './App';\r\nimport * as reducers from \"./store/reducers\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n  combineReducers(reducers),\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ ?\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() :\r\n      compose,\r\n  )\r\n);\r\n\r\n// send dispatch and saga to open web socket connection when user enter name\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App\r\n      dispatch={store.dispatch}\r\n      saga={sagaMiddleware}\r\n    />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}